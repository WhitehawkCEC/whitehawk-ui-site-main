import{aU as M,aG as T,c as o,aV as L,c0 as R,cA as b,a_ as A,cB as w,cC as z}from"./index.d39f0bf8.js";import{s as D}from"./index.e734c774.js";const I="active-questionnaire",G=M(I,()=>{const p=T(),g=o(()=>{var e;return(e=p.company)==null?void 0:e.id}),k=L(`${I}.chosenQuestionnaireId`,null,{deep:!1,serializer:z.string}),c=o({get(){return k.value||p.mainQuestionnaireId},set(e){e&&(k.value=e)}}),Q=R.read(c),i=o(()=>Q.data.value),x=b.list(g),l=D(o(()=>{var e,t,a;return(a=(t=(e=x.data.value)==null?void 0:e.find(s=>{var n;return((n=s.questionnaireId)==null?void 0:n.value)===c.value}))==null?void 0:t.id)==null?void 0:a.value})),v=A(0),d=A(0),y=w.list(l),f=o(()=>y.data.value||[]),q=w.create(),C=w.update(),h=o(()=>{var t;const e=new Map;return(t=i.value)==null||t.sections.forEach(a=>{const s=[];if(a.questions.forEach(n=>{n.answerSet&&n.answerSet.answers&&n.answerSet.answers.forEach(r=>{var u,E;((u=r.id)==null?void 0:u.value)===((E=n.id)==null?void 0:E.value)&&s.push(r.riskScore)})}),a.id){const n=s.reduce((r,u)=>r+u,0);e.has(a.id.value)||e.set(a.id.value,n)}}),e}),S=o(()=>{var t;const e=new Map;return(t=i.value)==null||t.sections.forEach(a=>{const s=[];if(a.questions.forEach(n=>{n.answerSet&&n.answerSet.answers.forEach(r=>s.push(r.riskScore))}),a.id){const n=s.reduce((r,u)=>r+u,0);e.has(a.id.value)||e.set(a.id.value,n)}}),e}),m=o(()=>{var e;return(e=i.value)==null?void 0:e.sections[v.value]});return{questionnaireId:c,questionnaire:i,sectionIndex:v,questionIndex:d,takenId:l,answers:f,sectionTotals:h,sectionMaxes:S,currentSection:m,currentQuestion:o(()=>{var e;return(e=m.value)==null?void 0:e.questions[d.value]}),totalSections:o(()=>{var e;return(e=i.value)==null?void 0:e.sections.length}),totalQuestions:o(()=>{var t;const e=[];return(t=i.value)==null||t.sections.forEach(a=>{e.push(a.questions.length)}),e.reduce((a,s)=>a+s,0)}),riskScoreTotal:o(()=>{let e=0;return f.value.forEach(t=>{Array.isArray(t)&&t.forEach(a=>{a.riskScore&&(e=e+a.riskScore)}),e=e+t.riskScore}),e}),riskScoreMax:o(()=>{var t;let e=0;return(t=i.value)==null||t.sections.forEach(a=>{a.questions.forEach(s=>{s.answerSet&&s.answerSet.answers.forEach(r=>e=e+r.riskScore)})}),e}),sectionTotal(e){return h.value.get(e)||0},sectionMax(e){return S.value.get(e)||0},sectionPercentage(e){const t=h.value.get(e)||0,a=S.value.get(e)||0;return Math.round(t*100/a)},questionScore(e){let t=0;return f.value.forEach(a=>{var s;((s=a.questionId)==null?void 0:s.value)===e&&(t=t+a.riskScore)}),t},setSectionIndex(e){v.value=e},setQuestionIndex(e){d.value=e},setQuestionnaireId(e){c.value=e},setTakenId(e){l.value=e},async createAnswer(e){if(!e)throw new Error("Answer is undefined.");await q.mutateAsync(e)},async updateAnswer(e){await C.mutateAsync(e)},clearData(){v.value=0,d.value=0,c.value=void 0,l.value=void 0}}});export{G as u};
